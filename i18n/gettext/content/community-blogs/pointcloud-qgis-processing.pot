#
msgid ""
msgstr ""
"Project-Id-Version: content/community-blogs/pointcloud-qgis-processing.md 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-11 20:46+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: content/community-blogs/pointcloud-qgis-processing.md:0
msgid "blog"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:0
msgid "Lutra Consulting: Native point cloud processing in QGIS"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:0
msgid "pointcloud-qgis-processing."
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:0
msgid "2023-05-31"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:0
msgid ""
"https://lutraconsulting.co.uk/blog/2023/05/30/pointcloud-qgis-processing/"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:0
msgid "true"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:0
msgid "planet"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:11
msgid ""
"<p>After the addition of support for visualising point clouds in the recent "
"versions of QGIS, the next step was to add the processing tools so users can"
" manage and analyse their data.</p>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:13
msgid ""
"<p>There are several 3rd party QGIS plugins (either proprietary or not fully"
" open source) which allow users to interrogate and analyse lidar data. But "
"with our latest work, we have introduced powerful point cloud algorithms to "
"the QGIS Processing framework. All the algorithms are available out of the "
"box in QGIS 3.32, with no need to install plugins.</p>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:15
msgid ""
"<p>In this blog post, we summarise the initial point cloud algorithms for "
"QGIS Processing toolbox which will be available in QGIS 3.32 (to be released"
" at the end of June 2023). This work was made possible by the generous "
"donations to our <a "
"href=\"https://www.lutraconsulting.co.uk/crowdfunding/pointcloud-processing-"
"qgis/\">crowdfunding</a>.</p>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:17
msgid ""
"<h2 id=\"point-cloud-algorithms-in-qgis\">Point Cloud algorithms in "
"QGIS</h2>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:19
msgid ""
"<p>First off a quick look at the new algorithms as shown in the Processing "
"toolbox in three groups:</p>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:21
msgid ""
"<center>\n"
"  <p><img title=\"Point Cloud algorithms in QGIS processing toolbox\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_toolbox.png\" alt=\"Point Cloud algorithms in QGIS processing toolbox\" /></p>\n"
"  Point Cloud algorithms in QGIS processing toolbox\n"
"</center>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:26
msgid ""
"<ul>\n"
"  <li><strong>Convert formats</strong>: this will allow you to convert your point cloud data between LAS and LAZ formats for the time being. Other PDAL supported formats can be added later.</li>\n"
"  <li><strong>Export to raster</strong>: with this algorithm you can export point cloud to a regularly gridded raster data. It uses inverse distance weighting to assign raster cell values. Raster cells with no nearby points will get “no data” values (these holes may be removed by using “Fill nodata” raster algorithm).</li>\n"
"</ul>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:31
msgid ""
"<center>\n"
"  <p><img title=\"Input point cloud layer file\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_input.png\" alt=\"Input point cloud layer file\" /></p>\n"
"  Input point cloud layer file\n"
"  <p><img title=\"Raster output using Intensity attribute of points\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_intensity.png\" alt=\"Raster output using Intensity attribute of points\" /></p>\n"
"  Raster output using Intensity attribute of points\n"
"</center>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:38
msgid ""
"<ul>\n"
"  <li><strong>Export to raster (using triangulation)</strong>: this allows you to export Z data to a regularly gridded raster by interpolating between the points using triangulation. Note that this can be slower if you are dealing with a large dataset. If your point cloud is dense, you can export your ground points as a raster using the Export to raster algorithm.</li>\n"
"</ul>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:42
msgid ""
"<center>\n"
"  <p><img title=\"Terrain raster output generated by point cloud triangulation\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_dtm.png\" alt=\"Terrain raster output generated by point cloud triangulation\" /></p>\n"
"  Terrain raster output generated by point cloud triangulation\n"
"</center>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:47
msgid ""
"<ul>\n"
"  <li><strong>Export to vector</strong>: to export point cloud to other vector formats. This is useful to export some of your data for software applications which do not support point cloud data and still use formats such as CSV, Shapefile, DXF.</li>\n"
"</ul>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:51
msgid ""
"<center>\n"
"  <p><img title=\"Exporting point cloud (ground points) to Shapefile styled based on the elevation\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_pnt_vector.png\" alt=\"Exporting point cloud (ground points) to Shapefile styled based on the elevation\" /></p>\n"
"  Exporting point cloud (ground points) to Shapefile styled based on the elevation!\n"
"</center>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:56
msgid ""
"<ul>\n"
"  <li><strong>Assign projection</strong>: assigns a projection to a point cloud layer (if it is wrong or missing)</li>\n"
"  <li><strong>Build virtual point cloud (VPC)</strong>: with this algorithm you can generate a virtual file (based on STAC specification) and load them as a single file in QGIS. There will be a separate blog post detailing this new exciting feature.</li>\n"
"  <li><strong>Clip</strong>: clip a point cloud layer by a vector polygon layer.</li>\n"
"</ul>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:62
msgid ""
"<center>\n"
"  <p><img title=\"Input point cloud layer and a polygon coverage\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_clipin.png\" alt=\"Input point cloud layer and a polygon coverage\" /></p>\n"
"  Input point cloud layer and a polygon coverage\n"
"  <p><img title=\"Result of the clipping algorithm\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_clipout.png\" alt=\"Result of the clipping algorithm\" /></p>\n"
"  Result of the clipping algorithm\n"
"</center>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:69
msgid ""
"<ul>\n"
"  <li><strong>Create COPC</strong>: when you load a non-indexed point cloud layer in QGIS, it will take a while for the application to create the COPC index for your file. With this algorithm, you can create the index for all your files in a batch mode.</li>\n"
"  <li><strong>Information</strong>: displays information from a point cloud layer:</li>\n"
"</ul>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:74
msgid ""
"<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>LAS           1.4\n"
"point format  6\n"
"count         56736130\n"
"scale         0.001 0.001 0.001\n"
"offset        431749.999 5440919.999 968.898\n"
"extent        431250 5440420 424.266\n"
"              432249.999 5441419.999 1513.531\n"
"crs           ETRS89 / UTM zone 34N (N-E) (EPSG:3046)  (vertical CRS missing!)\n"
"units         horizontal=metre  vertical=unknown\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:84
msgid "Attributes:"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:85
msgid "X floating 8"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:86
msgid "Y floating 8"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:87
msgid "Z floating 8"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:88
msgid "Intensity unsigned 2"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:89
msgid "ReturnNumber unsigned 1"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:90
msgid "NumberOfReturns unsigned 1"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:91
msgid "ScanDirectionFlag unsigned 1"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:92
msgid "EdgeOfFlightLine unsigned 1"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:93
msgid "Classification unsigned 1"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:94
msgid "ScanAngleRank floating 4"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:95
msgid "UserData unsigned 1"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:96
msgid "PointSourceId unsigned 2"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:97
msgid "GpsTime floating 8"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:98
msgid "ScanChannel unsigned 1"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:99
msgid "ClassFlags unsigned 1 </code></pre></div></div>"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:101
msgid ""
"<center>\n"
" <p>Output from point cloud information algorithm</p>\n"
"</center>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:105
msgid ""
"<ul>\n"
"  <li><strong>Merge</strong>: join multiple point cloud layers into a single file</li>\n"
"  <li><strong>Reproject</strong>: reproject the input file to a different coordinate reference system</li>\n"
"  <li><strong>Thin (by sampling radius)</strong>: reduces the number of points within a certain radius</li>\n"
"</ul>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:111
msgid ""
"<center>\n"
"  <p><img title=\"Thining point cloud (by sampling radius)\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_thinning.gif\" alt=\"Thining point cloud (by sampling radius)\" /></p>\n"
"  Thining point cloud (by sampling radius)\n"
"</center>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:116
msgid ""
"<ul>\n"
"  <li><strong>Thin (by skipping points)</strong>: reduces the number of points by skipping nearby points</li>\n"
"  <li><strong>Tile</strong>: this algorithm generates a set of tiles based on the input point cloud layer and tile size</li>\n"
"  <li><strong>Boundary</strong>: generates a (multi) polygon from your point cloud data. The output file might contain holes depending on the density of your point cloud input data.</li>\n"
"</ul>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:122
msgid ""
"<center>\n"
"  <p><img title=\"Extracting high vegetation and building polygons from an input point cloud layer\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_boundary.png\" alt=\"Extracting high vegetation and building polygons from an input point cloud layer\" /></p>\n"
"  Extracting high vegetation and building polygons from an input point cloud layer\n"
"</center>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:127
msgid ""
"<ul>\n"
"  <li><strong>Density</strong>: outputs a raster file based on the number of points within each raster cell - useful for quality checking of point cloud datasets</li>\n"
"</ul>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:131
msgid ""
"<center>\n"
"  <p><img title=\"Point density (number of points per 2x2 m)  as a raster\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_density.png\" alt=\"Point density (number of points per 2x2 m)  as a raster\" /></p>\n"
"  Point density (number of points per 2x2 m)  as a raster\n"
"</center>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:136
msgid ""
"<ul>\n"
"  <li><strong>Filter</strong>: it creates a new file based on the filter set as an expression. Note that most of the algorithms support on-the-fly filtering under the Advanced parameters.</li>\n"
"</ul>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:140
msgid ""
"<center>\n"
"  <p><img title=\"Filtering of high vegetation class from an input point cloud layer\" src=\"https://lutraconsulting.co.uk/img/posts/pc3_processing_filtering.png\" alt=\"Filtering of high vegetation class from an input point cloud layer\" /></p>\n"
"  Filtering of high vegetation class from an input point cloud layer\n"
"</center>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:145
msgid "<h2 id=\"behind-the-scenes\">Behind the scenes</h2>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:147
msgid ""
"<p>All the heavy lifting of the point cloud processing is done by PDAL - a "
"state of the art open source library for processing point clouds. PDAL "
"provides a wide range of “readers”, “filters” and “writers” to build complex"
" pipelines to process point clouds.</p>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:149
msgid ""
"<p>We have built a new standalone command line tool <a "
"href=\"https://github.com/PDAL/wrench\">pdal_wrench</a> on top of PDAL. It "
"addresses two major issues that non-expert users typically face when working"
" with PDAL:</p>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:151
msgid ""
"<ul>\n"
"  <li><strong>Ease of use</strong>: not everyone finds it easy to manually craft JSON files with pipelines, study manuals of the many stages and read details about file formats involved.</li>\n"
"  <li><strong>Parallel execution</strong>: PDAL runs pipelines in a single thread, so only one CPU gets to do the work normally and users need to implement their own parallelism if they want to speed up processing.</li>\n"
"</ul>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:156
msgid ""
"<p>The command line tool provides a simple set of commands that take care of"
" everything. For example, to export a raster layer with elevations (DEM) "
"with 1 meter resolution:</p>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:158
msgid ""
"<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pdal_wrench to_raster --output=raster.tif --resolution=1 --attribute=Z data.las\n"
"</code></pre></div></div>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:161
msgid ""
"<p>The pdal_wrench tool does not depend on QGIS, so it can be easily used "
"separately.</p>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:163
msgid ""
"<p>The commands are designed to run in parallel when there are multiple "
"input files or when the input file is in COPC format. Depending on the "
"algorithm, the work gets split spatially into square tiles (1000x1000 map "
"units by default) for parallel processing, or individual files are processed"
" in parallel. With a single ordinary LAS/LAZ file on input, there is "
"currently no parallelism going on.</p>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:165
msgid ""
"<p>For commands that are sensitive to edge artifacts (such as export to "
"raster), we take care of processing extra points outside of the extent of "
"each tile (referred to as collar or buffer) to make sure the results are "
"correct as if no tiling would be happening (see Martin Isenburg’s article "
"for more details: https://rapidlasso.com/2015/08/07/use-buffers-when-"
"processing-lidar-in-tiles/).</p>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:167
msgid "<h2 id=\"future-work\">Future work</h2>\n"
msgstr ""

#: content/community-blogs/pointcloud-qgis-processing.md:169
msgid ""
"<p>The current list of point cloud algorithms already allows users to do "
"plenty of work. But more could be added to the toolbox - algorithms that are"
" already supported by PDAL, but not exposed in QGIS: classification, noise "
"removal, surface reconstruction, clustering, height above ground, colorizing"
" and many more. If you are interested in more point cloud processing "
"algorithms in QGIS, please  <a "
"href=\"mailto:info@lutraconsulting.co.uk\">contact us</a> and we will be "
"happy to add them to future QGIS releases.</p>\n"
msgstr ""
